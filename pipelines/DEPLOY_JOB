pipeline {
    // Possible agent configurations - you must have one and only one at the top level.
    agent any

    // Access parameters with 'params.PARAM_NAME' - that'll get you default values too.
    parameters {
        choice(name: 'APPLICATION', choices: 'app1\napp2\napp3\app4', description: 'Application name')
        choice(name: 'ENVIRONMENT', choices: 'sit\nuat\nprod', description: '')
        string(name: 'SCM_BRANCH', defaultValue: '', description: 'This is the Release SVN Branch name of the deployed application')
        choice(name: 'TYPE', choices: 'snapshots\nbeta\nrelease',
                description: 'Note:\n' +
                        'deploy only snapshots to sit\n' +
                        'deploy only beta to uat\n' +
                        'deploy only release to prod')
        string(name: 'VERSION', defaultValue: '', description: 'Enter which version to be deployed')
        string(name: 'CAUSE', defaultValue: '',
                description: 'Optional\n' +
                        'Accepts any string. Leave it blank if you do a manual build.\n' +
                        'Currently used for rollbacks through remote builds.\n' +
                        '\n' +
                        'Example:\n' +
                        'To rollback the deployed defective build 1.01.05 to previously deployed successful build 1.01.04 : pass parameter value as \n' +
                        'ROLLBACK_1.01.05\n' +
                        'Note: This will delete the defective build 1.01.05 from artifactory')        
    }

    options {
        // General Jenkins job properties
        buildDiscarder(logRotator(daysToKeepStr: '5'))
        disableConcurrentBuilds()
        //skipDefaultCheckout()
        // "wrapper" steps that should wrap the entire build execution.
        // Edit Timestamper in Jenkins settings to set the required format.
        timestamps()
        timeout(time: 1, unit: 'HOURS')
    }

    environment {
        def repoPath = "repo-artifacts-" + "${params.TYPE}"        
        def repoMvnPath = "libs-" + "${params.TYPE.replaceAll(/s$/,'')}" + "-local"
        
        def APP1_EMAIL_LIST = 'abc@def.com,abc@def.com,abc@def.com'
        def APP2_EMAIL_LIST = 'abc@def.com,abc@def.com,abc@def.com'
        def APP3_EMAIL_LIST = 'abc@def.com,abc@def.com,abc@def.com' 
        def COM_EMAIL_LIST = 'abc@def.com,abc@def.com,abc@def.com'
        def CEN_EMAIL_LIST = 'abc@def.com,abc@def.com,abc@def.com'

        def WILDFLY_OPERATION="status"

        def WILDFLY_INSTANCES="wildfly1 wildfly2"
        def WILDFLY_FOLDERS="WILDFLY_HOME1 WILDFLY_HOME2"
        def WILDFLY_WEB_PORTS="WILDFLY_HOME1_PORT WILDFLY_HOME2_PORT"
        def ENV1_SERVERS_LIST="SERVER_IP1 SERVER_IP2 .."
        def ENV2_SERVERS_LIST="SERVER_IP1 SERVER_IP2 .."
        def ENV3_SERVERS_LIST="SERVER_IP1 SERVER_IP2 .."
        def APACHE_CONFIG_FILE="APACHE_CONFIG_FILE"
        def CONTROL_SCRIPT = "CONTROL_SCRIPT"
    }

    stages {
        stage('Validate input params') {
            steps {
                script {                    
                    if (params.APPLICATION == '') {
                        sh(returnStdout: true, script: "echo 'Missing param : APPLICATION' && exit 1")
                    }
                    else if (params.SCM_BRANCH == '') {
                        sh(returnStdout: true, script: "echo 'Missing param: SCM_BRANCH cannot be empty' && exit 1")
                    }
                    else if (params.ENVIRONMENT == 'sit' && params.TYPE != 'snapshots') {
                        sh(returnStdout: true, script: "echo 'Invalid params. Deploy only snapshots to env1 !!' && exit 1")
                    }                    
                    else if (params.ENVIRONMENT == 'uat' && params.TYPE != 'beta') {
                        //there is no beta for service commons. 
                        //so, service commons snapshots will be deployed to UAT as well
                        if(params.APPLICATION != 'app4'){
                            sh(returnStdout: true, script: "echo 'Invalid params. Deploy only beta to env2 !!' && exit 1")
                        }                        
                    }
                    else if (params.ENVIRONMENT == 'prod' && params.TYPE != 'release') {
                        sh(returnStdout: true, script: "echo 'Invalid params. Deploy only release to env3 !!' && exit 1")
                    }
                    
                    env.EMAIL_LIST = params.APPLICATION == "app1" ? env.APP1_EMAIL_LIST : params.APPLICATION == "app2" ? env.APP2_EMAIL_LIST : params.APPLICATION == "app3" ? env.APP3_EMAIL_LIST : params.APPLICATION == 'app4' ? env.COM_EMAIL_LIST : env.CEN_EMAIL_LIST
                    
					
                    env.deployBuildJobBaseUrl = env.JENKINS_URL + 'job/DEPLOY_JOB/buildWithParameters?'
                    env.deployLink = deployBuildJobBaseUrl + '&APPLICATION=' + params.APPLICATION + '&ENVIRONMENT=' + params.ENVIRONMENT +
                                         '&SCM_BRANCH=' + params.SCM_BRANCH + '&TYPE=' + params.TYPE + '&VERSION='
										 
                    def promoteBuildJobBaseUrl = env.JENKINS_URL + 'job/SNAPSHOTS_JOB/buildWithParameters?'
                    env.promoteLink = promoteBuildJobBaseUrl + '&APPLICATION=' + params.APPLICATION + '&TYPE=beta' +
                                         '&SCM_BRANCH=' + params.SCM_BRANCH + '&SNAPSHOT_VER='
										 
                    def releaseBuildJobBaseUrl = env.JENKINS_URL + 'job/RELEASE_JOB/buildWithParameters?'
                    env.releaseLink = releaseBuildJobBaseUrl + '&APPLICATION=' + params.APPLICATION + '&TYPE=beta' + 
                                        '&SCM_BRANCH=' + params.SCM_BRANCH + '&BETA_VER='
                }
            }
        }

        //this stage is run for all normal application war files.
        //at the time of creating this pipelne, 
        //  service commons is a maven repository in artifactory, and,
        //    the other apps are stored in generic repositories.
        stage('Get application build artifacts from Artifactory') {
            when {
                expression { params.APPLICATION != 'app4' }
            }
            steps {
                script {                   
                    // Obtain an Artifactory server instance, defined in Jenkins --> Manage:
                    def server = Artifactory.server 'REPO'
                    env.artUrl = server.url.toString()
                    env.appRepoPath = repoPath + '/' + params.APPLICATION
                    def downloadSpec = """{
                            "files": [
                                {
                                "pattern": "${env.appRepoPath}/${params.VERSION}/${params.APPLICATION}.war",
                                "target": "${params.VERSION}/",
                                "flat": true
                                }
                            ]
                        }"""
                    server.download(downloadSpec)
                }
            }
        }

        //this stage is run only for service commons.
        stage('Get service commons build artifact from Artifactory') {
            when {
                expression { params.APPLICATION == 'app4' }
            }
            steps {
 				script{
                    def server = Artifactory.server 'REPO'
                    env.artUrl = server.url.toString()                     
                    env.appName = params.APPLICATION.toString().split('/')[-1]
                    env.appRepoUrl = env.artUrl + '/' + repoMvnPath + '/' + params.APPLICATION
                    withCredentials([usernamePassword(credentialsId: 'artifactoryAdmin',passwordVariable: 'ARTIFACTORY_USER_PASSWORD',usernameVariable: 'ARTIFACTORY_USER')]) {
                            sh '''
                                set +e
                                mkdir -p ${VERSION}
                                curl -sS -k -u ${ARTIFACTORY_USER}:${ARTIFACTORY_USER_PASSWORD} "${appRepoUrl}/${VERSION}/maven-metadata.xml" > .mvnMetaDataXml                                
                                appShellVer=`python -c 'import sys;from lxml import etree;print etree.parse(".mvnMetaDataXml").find("versioning").find("snapshotVersions").find("snapshotVersion").find("value").text'`
                                curl -sS -k -u ${ARTIFACTORY_USER}:${ARTIFACTORY_USER_PASSWORD} ${appRepoUrl}/${VERSION}/${appName}-\$appShellVer.war > ${VERSION}/${appName}.war
                            '''
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                script {                    
                    env.appName = params.APPLICATION == 'app4' ? params.APPLICATION.toString().split('/')[-1] : params.APPLICATION
                    env.DEPLOY_WAR_FILE = env.WORKSPACE + '/' + params.VERSION + '/' + env.appName + '.war'
                    wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'XTerm']){
                        sh "${CONTROL_SCRIPT}"
                    }
                }
            }
        }

        stage('Delete snapshot with deployment issues (only application war files)') {
            steps {
                script {                    
                    if (params.CAUSE != '' && params.CAUSE =~ /^ROLLBACK_/) {
                        // Obtain an Artifactory server instance, defined in Jenkins --> Manage:
                        def server = Artifactory.server 'REPO'
                        def invalidBuild = params.CAUSE.toString().split('_')[-1]
                        def repoUrl = server.url.toString() + '/' + env.appRepoPath + '/' + invalidBuild
                        withCredentials([usernamePassword(credentialsId: 'artifactoryAdmin', passwordVariable: 'ARTIFACTORY_USER_PASSWORD', usernameVariable: 'ARTIFACTORY_USER')]) {
                            sh "curl -sS -XDELETE -k -u ${ARTIFACTORY_USER}:${ARTIFACTORY_USER_PASSWORD} ${repoUrl}"
                        }
                    } else {
                        echo params.CAUSE
                    }
                }
            }
        }

        stage('Email Notification for apps') {            
            when {
                expression { params.APPLICATION != 'app4' }
            }
            steps {
                script {
                    // Obtain an Artifactory server instance, defined in Jenkins --> Manage:
                    def server = Artifactory.server 'REPO'
                    env.repoAqlUrl = server.url.toString() + '/api/search/aql'
                    
                    //Assumption, Artifactory will have snapshots which were deployed to environments.
                    //Possible case where a previously deployed artifact had issues and was rolled back.
                    //The below aql doesn't address this issue. It just gets the last 5 artifacts from repository.
                    //May be, set some property in artifactory at artifact level either during rollback or during deploy to identify valid builds.
                    //Later filter the artifacts by modifying the below aql.
                    def queryAql = """items.find(
                                                {
                                                    "repo": "${env.repoPath}",
                                                    "\$and": [{
                                                            "path": { "\$match": "${params.APPLICATION}/*"}
                                                        }]
                                                }
                                            )
                                        .include("path","created")
                                        .sort({"\$desc": ["created"]})
                                        .offset(1)
                                        .limit(5)"""

                    writeFile file: "getLast5Versions.aql", text: queryAql

                    withCredentials([usernamePassword(credentialsId: 'artifactoryAdmin', passwordVariable: 'ARTIFACTORY_USER_PASSWORD', usernameVariable: 'ARTIFACTORY_USER')]) {
                        env.last5Versions = sh(returnStdout: true,
                                script: "curl -sS -XPOST -k -u ${ARTIFACTORY_USER}:${ARTIFACTORY_USER_PASSWORD} ${repoAqlUrl} -TgetLast5Versions.aql"
                        ).trim()
                    }

                    def jsonData = readJSON text: last5Versions
                    //Prepare email content for deployed snapshots
                    if (params.TYPE == 'snapshots') {
                        env.content = """ Snapshot Version deployed to SIT  : <b> ${params.VERSION} </b> <br>                     
                            <br> Rollback to previous version : <br>
                            """
                        //get version number from jsonData retrieved from artifactory and populate them in rollback links
                        jsonData.results.each {
                            def verList = it.path.split('/')[-1].toString()
                            content = content + '<a href="' + deployLink + verList + '&CAUSE=ROLLBACK_' + params.VERSION + '"/>' + verList + '</a> <br>'
                        }
                        //Provide link to promote the snapshot to beta repo for UAT deployment
                        content = content + "<br> Promote <b> ${params.VERSION} </b> to Beta repository for UAT deployment : " +
                                '<a href="' + promoteLink + params.VERSION + '"/>BETA</a>'
                    }

                    //Prepare email content for deployed beta
                    if (params.TYPE == 'beta') {
                        env.content = """ Beta Version deployed to UAT  : <b> ${params.VERSION} </b> <br>                     
                            <br> Rollback to previous version : <br>
                            """
                        //get version number from jsonData retrieved from artifactory and populate them in rollback links
                        jsonData.results.each {
                            def verList = it.path.split('/')[-1].toString()
                            content = content + '<a href="' + deployLink + verList + '&CAUSE=ROLLBACK_' + params.VERSION + '"/>' + verList + '</a> <br>'
                        }
                        //Provide link to promote the beta to release repo for PROD deployment
                        env.contentProd = content + "<br> Promote <b> ${params.VERSION} </b> to Release repository for PROD deployment : " +
                                '<a href="' + releaseLink + params.VERSION + '"/>PROD</a>'
                    }

                    //Prepare email content for deployed prod
                    if (params.TYPE == 'release') {
                        env.content = """ Release Version deployed to PROD  : <b> ${params.VERSION} </b> <br>                     
                            <br> Rollback to previous version : <br>
                            """
                        //get version number from jsonData retrieved from artifactory and populate them in rollback links
                        jsonData.results.each {
                            def verList = it.path.split('/')[-1].toString()
                            content = content + '<a href="' + deployLink + verList + '&CAUSE=ROLLBACK_' + params.VERSION + '"/>' + verList + '</a> <br>'
                        }
                    }

                    if (params.CAUSE != '' && params.CAUSE =~ /^ROLLBACK_/) {
                        def brokenRelease = params.CAUSE.toString().split('_')[-1]
                        content = content + "<br><br><font color=\"red\"><u>NOTE:</u></font> Deployment rolled back to ${params.VERSION} from ${brokenRelease} <br>" +
                                " Broken build ${brokenRelease} is <u>deleted</u> from repository"
                    }
                    
                    def action = env.CAUSE =~ /^ROLLBACK_/ ? 'ROLLBACK' : 'DEPLOY'
                    //email to development team
                    emailext(
                            to: env.EMAIL_LIST,
                            subject: params.APPLICATION.toUpperCase() + ' ' + params.TYPE.toUpperCase() + ' ' + action + " : JOB ${env.JOB_NAME} #${env.BUILD_NUMBER} : SUCCESS",
                            mimeType: "text/html",
                            body: content
                    )

                    //Send RELEASE link to central team.
                    if (params.TYPE == 'beta' && params.ENVIRONMENT == 'uat') {
                        //email to central team
                        emailext(
                            to: env.CEN_EMAIL_LIST,
                            subject: params.APPLICATION.toUpperCase() + ' ' + params.TYPE.toUpperCase() + ' ' + action + " : JOB ${env.JOB_NAME} #${env.BUILD_NUMBER} : SUCCESS",
                            mimeType: "text/html",
                            body: contentProd
                        )
                    }
                }
            }
        }

        stage('Email Notification for service commons') {
            when {
                expression { params.APPLICATION == 'app4' }
            }
            steps {
 				script{
                    def emailContent = params.TYPE.toUpperCase() + " version "+ params.VERSION + " deployed to " + params.ENVIRONMENT
                    
                    if(params.TYPE == "snapshots" && params.ENVIRONMENT == "sit") {
                        def deployUrl = env.deployBuildJobBaseUrl + '&APPLICATION=' + params.APPLICATION + '&ENVIRONMENT=uat' +
                                            '&SCM_BRANCH=' + params.SCM_BRANCH + '&TYPE=' + params.TYPE + '&VERSION='
                        emailContent += "<br>Deploy to UAT: " + '<a href="' + deployUrl + params.VERSION + '&cause=DEPLOY_' + params.VERSION + '"/>' + params.VERSION + '</a>'
                    }
                    else if(params.TYPE == "snapshots" && params.ENVIRONMENT == "uat") {
                        def releaseUrl = env.releaseBuildJobBaseUrl + '&APPLICATION=' + params.APPLICATION + '&SCM_BRANCH=' + params.SCM_BRANCH + '&SNAPSHOT_VER='
                        emailContent += "<br>Deploy to PROD: " + '<a href="' + releaseUrl + params.VERSION + '&cause=DEPLOY_' + params.VERSION + '"/>' + params.VERSION + '</a>'  
                    }
                    
                    emailext(
                        to: env.COM_EMAIL_LIST,
                        subject: env.APPLICATION.toUpperCase() + " " + params.TYPE.toUpperCase() + " DEPLOY : JOB ${env.JOB_NAME} #${env.BUILD_NUMBER} : SUCCESS",
                        mimeType: "text/html",
                        body: emailContent
                    )
                }
            }
        }
    }

    post {
        failure{
            emailext(
                    to: "${env.EMAIL_LIST}",
                    subject: params.APPLICATION.toUpperCase() + ' ' + params.TYPE.toUpperCase() + ' ' + action + " : JOB ${env.JOB_NAME} #${env.BUILD_NUMBER} : FAILURE",
                    body: "Build failed.. \n Check console output: ${env.BUILD_URL}"
            )
        }
    }
}
